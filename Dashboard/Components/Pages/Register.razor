@page "/register"
@rendermode InteractiveServer

@inject AuthService AuthService
@inject SalesService SalesService
@inject NavigationManager NavigationManager

<h3>Registro de Nuevo Usuario</h3>

<div class="card" style="max-width: 700px;">
    <div class="card-body">
        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="user" class="form-label">Nombre (será su usuario)</label>
                <InputText class="form-control" @bind-Value="registerModel.Users" />
                <ValidationMessage For="@(() => registerModel.Users)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Contraseña</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.PassWord" />
                <ValidationMessage For="@(() => registerModel.PassWord)" />
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">@message</div>
            }

            <button type="submit" class="btn btn-success">Registrar</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string? message;
    private bool isSuccess = false;

    private async Task HandleRegister()
    {
        message = null;
        isSuccess = false;

        try
        {
            // Asegúrate de que la URL en tu AuthService para registrar es la correcta
            var success = await AuthService.RegisterAsync(registerModel.Users, registerModel.PassWord);

            if (success)
            {
                isSuccess = true;
                message = "¡Registro exitoso! Ahora puedes iniciar sesión.";
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                message = "El registro falló. Es posible que el usuario ya exista.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error al intentar registrar: {ex.Message}";
        }
    }

    public class RegisterModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "El usuario es obligatorio.")]
        public string Users { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "La contraseña es obligatoria.")]
        [System.ComponentModel.DataAnnotations.MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres.")]
        public string PassWord { get; set; } = string.Empty;
    }
}